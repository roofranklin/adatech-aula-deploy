{"version":3,"file":"static/js/289.8b86240a.chunk.js","mappings":"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","sources":["components/Spacer/index.tsx","screens/Listview/Listview.styles.ts","components/SearchTerm/index.tsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","components/Checkbox/index.tsx","components/TodoListItem/index.tsx","components/Input/index.tsx","screens/Listview/index.tsx"],"sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\ntype SpacerProps = {\n  flex?: number;\n  height?: number;\n  width?: number;\n};\n\nconst StyledSpacer = styled.div<SpacerProps>`\n  height: ${(props) => props.height && `${props.height}rem`};\n  width: ${(props) => props.width && `${props.width}rem`};\n  flex: ${(props) => props.flex};\n`;\n\nconst Spacer = ({ height, width, flex }: SpacerProps) => {\n  return (\n\n    <StyledSpacer height={height} width={width} flex={flex} />)\n};\n\nexport default Spacer;\n","import styled from \"styled-components\";\n\nexport const ListContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n  width: 30rem;\n`;\n\nexport const TodoListContainer = styled.div`\n  background: grey;\n  border-radius: 1rem;\n  padding: 3rem 1rem;\n  display: flex;\n  flex-direction: column;\n`;\n\ninterface ITodoListItemProps {\n  isComplete: boolean;\n}\n\nexport const StyledTodoListItem = styled.label<ITodoListItemProps>`\n  display: flex;\n  padding: 0.5rem 0;\n  align-items: center;\n  font-size: 1.2rem;\n  text-decoration: ${(props) => (props.isComplete ? \"line-through\" : \"none\")};\n  text-decoration-color: #fff;\n`;\n\nexport const StyledInput = styled.input`\n  background: rgba(0, 0, 0, 0.5);\n  border: none;\n  border-radius: 15px;\n  color: #fff;\n  padding: 20px 24px;\n`;\n","import { useTask } from \"../../context/task.context\";\nimport { StyledInput } from \"../../screens/Listview/Listview.styles\";\n\nconst SearchTerm = () => {\n  const { searchTerm, setSearchTerm } = useTask();\n\n  return (\n    <>\n      <StyledInput\n        placeholder=\"Search tasks\"\n        value={searchTerm}\n        onChange={(event) => setSearchTerm(event.target.value)}\n      />\n    </>\n  );\n};\n\nexport { SearchTerm };\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}","import styled, { StyledComponent } from \"styled-components\";\nimport { colors } from \"../../styles\";\nimport { ComponentProps } from \"react\";\n\nconst CheckboxContainer = styled.div`\n  display: inline-block;\n  vertical-align: middle;\n`;\n\nconst HiddenCheckbox = styled.input`\n  border: 0;\n  clip: rect(0 0 0 0);\n  clip-path: inset(50%);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  white-space: nowrap;\n  width: 1px;\n`;\n\ntype CheckboxProps = {\n  checked: boolean;\n};\n\nconst StyledCheckbox = styled.div<CheckboxProps>`\n  display: inline-block;\n  width: 25px;\n  height: 25px;\n  background: ${(props) => (props.checked ? colors.primary : \"none\")};\n  border: 3px solid ${colors.primary};\n  border-radius: 25px;\n  transition: all 100ms;\n`;\n\ntype Props = ComponentProps<StyledComponent<\"input\", {}>>;\n\nconst Checkbox = ({ checked, ...props }: Props) => {\n  return (\n    <CheckboxContainer>\n      <HiddenCheckbox {...props} type=\"checkbox\" />\n      <StyledCheckbox checked={checked} />\n    </CheckboxContainer>\n  );\n};\n\nexport default Checkbox;\n","import { ChangeEvent } from \"react\";\nimport { ITask } from \"../../screens/Listview/Listview.types\";\nimport Checkbox from \"../Checkbox\";\nimport Spacer from \"../Spacer\";\nimport { StyledTodoListItem } from \"../../screens/Listview/Listview.styles\";\n\ninterface ITodoListItem {\n  eachTask: ITask;\n  handleTaskCompleteChange: (\n    event: ChangeEvent<HTMLInputElement>,\n    eachTask: ITask\n  ) => void;\n}\n\nconst TodoListItem = ({\n  eachTask,\n  handleTaskCompleteChange,\n}: ITodoListItem) => {\n  return (\n    <StyledTodoListItem key={eachTask.id} isComplete={eachTask.isComplete}>\n      <Checkbox\n        key={eachTask.id}\n        checked={eachTask.isComplete}\n        onChange={(event: ChangeEvent<HTMLInputElement>) =>\n          handleTaskCompleteChange(event, eachTask)\n        }\n      />\n      <Spacer width={2} />\n      {eachTask.label}\n      <Spacer flex={1} />\n    </StyledTodoListItem>\n  );\n};\n\nexport default TodoListItem;\n","import { memo } from \"react\";\nimport { StyledInput } from \"../../screens/Listview/Listview.styles\";\n\ninterface IInputProps {\n  placeholder: string;\n  newTaskLabel: string;\n  handleNewTaskLabelChange: (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => void;\n  handleNewTaskKeyPress: (event: React.KeyboardEvent<HTMLInputElement>) => void;\n}\n\nconst AddTaskInput = ({\n  placeholder,\n  newTaskLabel,\n  handleNewTaskKeyPress,\n  handleNewTaskLabelChange,\n}: IInputProps) => {\n  console.log(\"\\n\");\n  console.log(\"ðŸš€ ~ file: index.tsx:15 ~ AddTaskInput: \", placeholder);\n\n  return (\n    <StyledInput\n      placeholder={placeholder}\n      value={newTaskLabel}\n      onChange={handleNewTaskLabelChange}\n      onKeyPress={handleNewTaskKeyPress}\n    ></StyledInput>\n  );\n};\n\nexport default memo(AddTaskInput);\n","import {\n  useState,\n  ChangeEvent,\n  KeyboardEvent,\n  useEffect,\n  useCallback,\n} from \"react\";\nimport Spacer from \"../../components/Spacer\";\nimport { ListContainer, TodoListContainer } from \"./Listview.styles\";\nimport { ITask } from \"./Listview.types\";\nimport { useTask } from \"../../context/task.context\";\nimport { SearchTerm } from \"../../components/SearchTerm\";\nimport TodoListItem from \"../../components/TodoListItem\";\nimport AddTaskInput from \"../../components/Input\";\n\nconst Listview = () => {\n  const { tasksFilter, addTask, updateTaskCompletion, Status } = useTask();\n  const [newTaskLabel1, setNewTaskLabel1] = useState(\"\");\n  const [newTaskLabel2, setNewTaskLabel2] = useState(\"\");\n\n  // const handleNewTaskLabelChange = (event: ChangeEvent<HTMLInputElement>) => {\n  //   setNewTaskLabel1(event.target.value);\n  // };\n\n  const handleNewTaskKeyPress1 = useCallback(\n    (event: KeyboardEvent<HTMLInputElement>) => {\n      if (event.key === \"Enter\" && newTaskLabel1 !== \"\") {\n        addTask(newTaskLabel1);\n        setNewTaskLabel1(\"\");\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [newTaskLabel1]\n  );\n\n  const handleNewTaskKeyPress2 = useCallback(\n    (event: KeyboardEvent<HTMLInputElement>) => {\n      if (event.key === \"Enter\" && newTaskLabel2 !== \"\") {\n        addTask(newTaskLabel1);\n        setNewTaskLabel2(\"\");\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [newTaskLabel2]\n  );\n\n  const handleTaskCompleteChange = (\n    event: ChangeEvent<HTMLInputElement>,\n    eachTask: ITask\n  ) => {\n    updateTaskCompletion(eachTask.id, event.target.checked);\n  };\n\n  const handleNewTaskLabelChange1 = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      setNewTaskLabel1(event.target.value);\n    },\n    []\n  );\n\n  const handleNewTaskLabelChange2 = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      setNewTaskLabel2(event.target.value);\n    },\n    []\n  );\n\n  useEffect(() => {\n    console.log(\"\\n\");\n    console.log(\"ðŸš€ ~ file: index.tsx:33 ~ Listview\");\n  }, []);\n\n  return (\n    <ListContainer>\n      <SearchTerm />\n      {Status}\n      <TodoListContainer>\n        {tasksFilter.map((eachTask) => (\n          <TodoListItem\n            eachTask={eachTask}\n            handleTaskCompleteChange={handleTaskCompleteChange}\n          />\n        ))}\n      </TodoListContainer>\n      <Spacer height={4} />\n      <AddTaskInput\n        placeholder=\"Add first task\"\n        newTaskLabel={newTaskLabel1}\n        handleNewTaskLabelChange={handleNewTaskLabelChange1}\n        handleNewTaskKeyPress={handleNewTaskKeyPress1}\n      />\n      <Spacer height={2} />\n      <AddTaskInput\n        placeholder=\"Add second task\"\n        newTaskLabel={newTaskLabel2}\n        handleNewTaskLabelChange={handleNewTaskLabelChange2}\n        handleNewTaskKeyPress={handleNewTaskKeyPress2}\n      />\n    </ListContainer>\n  );\n};\n\nexport default Listview;\n"],"names":["StyledSpacer","styled","_templateObject","_taggedTemplateLiteral","props","height","concat","width","flex","_ref","_jsx","ListContainer","TodoListContainer","_templateObject2","StyledTodoListItem","_templateObject3","isComplete","StyledInput","_templateObject4","SearchTerm","_useTask","useTask","searchTerm","setSearchTerm","_Fragment","children","placeholder","value","onChange","event","target","_objectWithoutProperties","source","excluded","key","i","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","CheckboxContainer","HiddenCheckbox","StyledCheckbox","checked","colors","_excluded","_jsxs","_objectSpread","type","eachTask","handleTaskCompleteChange","Checkbox","id","Spacer","label","AddTaskInput","newTaskLabel","handleNewTaskKeyPress","handleNewTaskLabelChange","console","log","onKeyPress","memo","tasksFilter","addTask","updateTaskCompletion","Status","_useState","useState","_useState2","_slicedToArray","newTaskLabel1","setNewTaskLabel1","_useState3","_useState4","newTaskLabel2","setNewTaskLabel2","handleNewTaskKeyPress1","useCallback","handleNewTaskKeyPress2","handleNewTaskLabelChange1","handleNewTaskLabelChange2","useEffect","map","TodoListItem"],"sourceRoot":""}